Custom Directives
---------------------------------------
Directive ?
A Directive is really just a Marker on a DOM element that tells Angular's HTML
compiler to attach a specified behavior to that DOM element. The compiler can
also transform/change the DOM elements and its children. The marker itself
as we're calling it can be one of four things, it can be and ATTRIBUTE, AND
ELEMENT NAME, a comment, and even a CSS class.

1. Register a Directive
.directive('myTag', myTag);
'myTag' - Normalized(CamelCased Name) name that will appear on HTML
myTag - Factory Function - returns DDO - DIRECTIVE DEFINITION OBJECT
executes only once, so perform initializations here, besides returning DDO

2. Define Factory Function
MyTag.$inject=[...]
function MyTag(...) {
var ddo = {
  template: 'Hello World';
};
return ddo;
}

3. Use in HTML
<my-tag></my-tag>
Normalized name - myTag

Restrict Property
------------------------------------
tells what angular compiler should look for to detect custom directive
var ddo = {
  restrict: 'AE' (Default: Attribute, Element)
  template: 'Hello World';
};
Best: Use E when directive has content along with behavior
Best: Use A when directive has no content but only extends the behavior of host element

Isolate Scope
----------------------------------------------------
1. Breaks prototypal inheritance from the parent
2. Less coupling between the directive and the controller

var ddo = {
  scope: {} - Signals isolate scope: Parent's scope is not inherited
  template: 'Hello World';
};

'=' and '@'
1. Bi-Directional Property Binding - (One change changes other)
scope: {
  myProp: '=myAttribute'
}
myProp - Local Scope Property
myAttribute - HTML Template and Attribute Name
myProp: '=' - Says that both are same
myProp: '=?' - Signifies that attribute value is optional

<my-tag my-prop="outerProp">
</my-tag>


2. DOM Attribute Property Binding -
As OuterProp value changes, changes my-attribute, my-Prop value inside directive also changes
But if directive value changes, nothing changes
myProp: '@myAttribute'
Binds myProp to the value of DOM attribute my-attribute
<my-tag my-attribute={{outerProp}}>
</my-tag>
