Custom Directives
---------------------------------------
Directive ?
A Directive is really just a Marker on a DOM element that tells Angular's HTML
compiler to attach a specified behavior to that DOM element. The compiler can
also transform/change the DOM elements and its children. The marker itself
as we're calling it can be one of four things, it can be and ATTRIBUTE, AND
ELEMENT NAME, a comment, and even a CSS class.

1. Register a Directive
.directive('myTag', myTag);
'myTag' - Normalized(CamelCased Name) name that will appear on HTML
myTag - Factory Function - returns DDO - DIRECTIVE DEFINITION OBJECT
executes only once, so perform initializations here, besides returning DDO

2. Define Factory Function
MyTag.$inject=[...]
function MyTag(...) {
var ddo = {
  template: 'Hello World';
};
return ddo;
}

3. Use in HTML
<my-tag></my-tag>
Normalized name - myTag

Restrict Property
------------------------------------
tells what angular compiler should look for to detect custom directive
var ddo = {
  restrict: 'AE' (Default: Attribute, Element)
  template: 'Hello World';
};
Best: Use E when directive has content along with behavior
Best: Use A when directive has no content but only extends the behavior of host element

Isolate Scope
----------------------------------------------------
1. Breaks prototypal inheritance from the parent
2. Less coupling between the directive and the controller

var ddo = {
  scope: {} - Signals isolate scope: Parent's scope is not inherited
  template: 'Hello World';
};

'=' and '@'
1. Bi-Directional Property Binding - (One change changes other)
scope: {
  myProp: '=myAttribute'
}
myProp - Local Scope Property
myAttribute - HTML Template and Attribute Name
myProp: '=' - Says that both are same
myProp: '=?' - Signifies that attribute value is optional, otherwise specifying is mandatory

<my-tag my-attribute="outerProp">
</my-tag>


2. DOM Attribute Property Binding -
As OuterProp value changes, changes my-attribute, my-Prop value inside directive also changes
But if directive value changes, nothing changes
myProp: '@myAttribute'
Binds myProp to the value of DOM attribute my-attribute
<my-tag my-attribute={{outerProp}}>
</my-tag>


Using Controllers Inside Directives
----------------------------------------------------
1. Declare Controller in Directive
function MyDirective() {
var ddo = {
    scope: {
      prop : '='
    },
    // Properties will now be available in this controllers scope
    controller: controllerToFunction,
    // Attach declared scope properties to controller instance instead directly to $scope
    bindToController: true,
    // Use myCtrl in directives template to refer to controller instance
    controllerAs: 'myCtrl',
    templateUrl: 'template.html'
};
return ddo;
}

2. Define Controller
ShoppingListController1.$inject = ['ShoppingListFactory'];
function ShoppingListController1(ShoppingListFactory) {
  var myCtrl = this;

  myCtrl.method() = function() {
  var name = "Hello " + myCtrl.prop;
  }
  // use and manipulate properties using myCtrl, not just prop but all props in isolate scope
}

3. Use in Directive's Template
<div ng-if="myCtrl.method()">
  {{myCtrl.prop}}
</div>

Bi-Directional vs One-Way Binding
prop: '=' - Bidirectional, two watchers
prop: '<' - One way Binding, Watches only identity of parent property, not the property inside directive

However, if objects binded using one way, if properties changes inside, then also it changes outside as
objects passed by reference
Bad practice to change objects passed into the directive, so better to use one-way

Bind method from Directive to Controller
-----------------------------------------------------
'&' binding allows us to execute a expression in the context of parent scope

1. Define method in controller
function Controller() {
// this refers to parent controller instance
  this.method = function(arg1) {
    this.prop = "Hi" + arg1;
  }
}

2.Declare method reference in Directive
function MyDirective() {
var ddo = {
    scope: {
    (directive) : (parent Template)
      myMethod: '&method'
    },
    templateUrl: 'template.html'
};
return ddo;
}

3. Declare in Parent Template
<my-directive method= "ctrl.method(mrArg)">
</my-directive>

4. Mark Method and Args in Directive Template
<button ng-click="dirCtrl.myMethod({myArg:'v1'});">
method parameter is map object key:value pair
<button>

Link Function In Directives
------------------------------------------
DOM manipulation is usually done inside of the link function, Declared on DDO
Link Function does not support injection, To use injection, inject them into directive


1.Declare LinkFunction
function MyDirective() {
var ddo = {
    scope: {...},
    link: LinkFunction,
    templateUrl: 'template.html'
};
return ddo;
}

// No Injection - scope same as $scope of directive, element is wrapper(JQLite(angular jquery) or JQuery Object)
, attributes of tag, controller if any
2. Define Link Function
function LinkFunction(scope, element, attrs, controller) {

}

Transclude in Directives
----------------------------------
Transclude allows whole template to be passed into a directive
The wrapped content is evaluated in parent's context not in directive's context

1.Set transclude to true
function MyDirective() {
var ddo = {
    scope: {...},
    link: LinkFunction,
    transclude: true,
    templateUrl: 'template.html'
};
return ddo;
}

2. Wrap some parent content
<my-directive>
<span>
  Do you want to Continue? {{ctrl.prop}} // parent controller
</span>
</my-directive>

3. ng-transclude to place wrapped content
<div ng-transclude></div>
