Routing
----------------------------
ngRoute                                           ui-router (Better Choice)
----------------------------------------------------------------------------------
seperate js file                            Seperate JS file
Dev by Google                               Dev by community
No concept of UI state                      UI state is central
Every route must be represented by URL        Can have a route with no unique URL
No Nested views                             URL routing is also supported
Ok for Prototype Projects                   Nested Views supported


1. Reference in HTML
after angular js
angular-ui-router.min.js

2. Place ui-view initial view placeholder
<ui-view></ui-view>
Content of view will be loaded here

3. Declare ui-router as dependency
angular.module('myApp', ['ui.router']);

4. Configure routes in .config method
.config(RoutesConfig);

RoutesConfig.inject= ['$stateProvider', '$urlRouterProvider'];
function RoutesConfig($stateProvider, $urlRouterProvider) {
}

$stateProvider
.state( 'view1', {
  url : '/view1',
  template: 'div tag'
});
// .state again if needed, chainable

$urlRouterProvider
.otherwise('/view1');

ui-sref='view1'
ui-sref-active='cssclasswhenactive'

Routing Using Controller
-----------------------------------------
We can declare a controller that is responsible for the state's template
right in the state's declaration instead of template html

.state( 'home', {
  url : '/',
  templateUr: 'Sample.html',
  controller: 'HomeCtrl as Home'
});

controller: 'HomeCtrl'
controllerAs: 'Home'

Same way use Home.data as before

Routing Using Resolve
-------------------------------------
Resolve property can be used to inject values directly into the controller responsible for state
If resolve property is a promise:
1. Router will wait for it to resolve before transitioning into new state
2. If rejected, router will not transition to new state at all
Name of key in resolve should be same as injected one in controller
Resolve can be objects or strings

1. Set up Resolve Property
.state( 'home', {
  url : '/',
  templateUr: 'Sample.html',
  controller: 'HomeCtrl as Home',
  resolve: {
    myData : [ 'Service', function (Service) {
      return Service.getData();
    }]
  }
});

Can also be String: myData: 'Hello World';
If promise rejected, view is not changed at all

2. Inject Resolve property into Controller
HomeCtrl.$inject = ['myData'];
function HomeCtrl(myData) {
  var view = this;
  view.myData = myData;
}

Routing using URL parameters
--------------------------------------------------
States URL property can be defined with parameters
wrapped in /{param1}, also regex available
$stateParams service to retrieve the param
$stateParams.paramName

1. Setup URL property with params
.state( 'home', {
  url : '/view1/{param1},
  templateUr: 'view1.html',
  controller: 'View1Ctrl as view1',
  resolve: {
    myData : [ '$stateParams', function ($stateParams) {
      return getData($stateParams.param1);
    }]
  }
});

2. Inject Resolve property into Controller
HomeCtrl.$inject = ['myData'];
function HomeCtrl(myData) {
  var view = this;
  view.myData = myData;
}

State name(Param name/value pairs)
<a ui-sref="view1({itemId:someVal})">
  Link
</a>

Route State with Nested Views
----------------------------------------------
List
Details
Master-Detail View Pair
Nested States allows us to logically represent Nested Views
Parent's state template has a ui-view in its template for a child's state template to insert HTML
Child state is represented as 'parent.child'
Optionally declared URL for child is concatenated to parents URL
Parent's resolve property can be injected to child's controller

.state( 'view1', {
  url : '/view1,
  templateUr: 'view1.html',
  resolve : {
    myData : 'Hello World';
  }
});

Setting-Up Child(Nested View) State

.state( 'view1.child', {
  url : '/detail/{param1},
  templateUr: 'view1Detail.html' // This is injected into view1.html parent, with <ui-view> tag
  controller: 'ChildCtrl as child'
});

ChildCtrl.$inject = ['myData']
function ChildCtrl(myData)





















1
