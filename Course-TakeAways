Expressions and Interpolation
---------------------------------------------------
{{}} - double braces, mustaches, handlebars call anything
Expressions : {{exp}}
Something that evaluates to a value
Processed by AngularJS and similar to eval(some_js) as in general JS
Diff:
1. Executed in context of scope and has access to properties defined in $scope
2. Doesn't throw errors if it results in TypeError or ReferenceError, just empty string returned
3. Also, unlike eval, control statements are not allowed inside expressions
4. Accept a filter or a filter chain to format the output.

Interpolation
-----------------------------------------------------
Process of evaluating a string and finding placeholders in it and replacing it with some values later
For ex: Hello {{name}} is interpolated to Hello Amar (message = Amar)
Still connected, so if message changes, output changes.

Filters In Angular JS
------------------------------------
var output = $filter('uppercase')(value);
value will be uppercased, 'uppercase is pre-defined filter'
1. creates filtering function
2. applies that function to value
3. Filter specific optional arguments
4. Direct use in HTML {{ value | uppercase}} or {{ "Hello" | uppercase}} or {{ "Hello" | uppercase : customarg :customarg}}
5. Angularjs.org -> Developer Guide -> built in filters

Custom Filters in Angular JS
------------------------------------------------------
Procedure:
1. Define filter factory function
Factory is a place to create new objects
function CustomFilterFactory() {
  return function(input, customArguments if needed) {
    return "Hello";
  };
}

2. Register filter factory with module
.filter('custom', CustomFilterFactory);

3. Inject it in controller, name'Filter' , Append filter to instance name
Ctrl.$inject = ['$scope', 'customFilter'];
function Ctrl($scope, customFilter) {
var name = "Amar";
customFilter(name, customParameters);
}

If HTML used, no need to inject (Step 3), same name no need of appending Filter
{{name | custom : arg1 : arg2 so on}}

Chain Filters
{{name | uppercase | custom}}
