Digest Cycles in Angular JS
------------------------------------------
onclick- simple JS - Handles event

ng-click, ng-keyup, event queue
click handled by Angular Context($scope)
call $digest

watchers setup - 2ways - functions keeps watching variables
1. $scope.name in JS
2. {{name}} in HTML
3. ng-model

Digest cycle runs to check if any value changed, two times, to see anything changed, to see nothing changed
dirty checking, loop runs until nothing changed
Once nothing has changed , reports to DOM, repaints the page

Setup watchers
$scope.$watch('variable', function(newValue, oldValue) {
 // blah blah blah
});

Digest Loop
If anythings changed, fired two times - to see anything changed, to see nothing changed
If nothings changed, fired only once.

Only applies to things done inside of Angular Context

<input type="text" ng-model="value">
<div>{{ value + '!' }}</div>
<button ng-click="getValue()">Get Value</button>

Not correct. ng-model causes 1. Interpolation of {{ value + '!' }} causes another.
You would think that since it's the same property, Angular wouldn't create another watcher.
However, interpolations *always* create another watch. The prime example of why is the + "!" part.
It needs a separate watcher because it's not simply a matter of that property.
Inside of a interpolation, you can have operations performed, so another watcher
that handles those operations and redisplays the newly created results is needed.
The button's ng-click doesn't cause any. So, final answer is 2.


Digest Apply
--------------------------------------------------
Events which happen inside angular context(ng-click) are handled by $digest as we have seen above
But to handle events happening outside of angular context $apply is used
In example, timeout event is used.
3 solutions
1. $scope.$digest
2. $scope.$apply(code); // will handle exceptions in angular context
3. find angular specific service, for ex: $timeout


2-way, 1-way binding
------------------------------------------------
2-way binding
ng-model='name'
one listener setup to listen to changes from browser
one watcher setup to watch changes in controller

1-way binding
{{name}}
one watcher setup to watch changes from controller

Watchers stay for above two types, forever

Many watchers setup will degrade the app perf sometimes
1-time binding
{{::name}}
initialize once from controller, then removes watcher, so less watchers, For ex: username doesn't change frequently
Removes watcher after initializes one time binding value
